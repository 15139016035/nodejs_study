/**
 * path 是nodejs提供的核心模块；
 *  - path 代表的就是路径；
 *  - 使用path需要先进行引入；
 *  - path 提供了很多方法，我们这里只举例演示一个 
 *      - path.resolove([...paths]) :生成绝对路径
 */



//引入核心模块
const path = require('path');


/**
 * 1. 直接调用: 返回当前工作目录的绝对路径；
 *      当前工作目录指的是，你在哪个目录下执行的node 命令；
 *      有一个目标的js文件要执行， 你可以在任意目录下使用node命令然后找到js文件的目录进行执行， ‘
 *      那么你在哪个目录下调用的node，哪个目录就是工作目录，就会返回这个目录的绝对路径；
 * 一般不会用这种方式，因返回的是不确定的结果； 
 */

const p1 = path.resolve();
console.log(p1);


/**
 * 2. 传入一个相对路径,会帮我们计算出一个绝对路径：
 *      计算规则： 工作目录+相对路径，拼接成一个完整路径；
 * 一般也不会这么用，因为工作目录可能不确定，那么最终返回的计算结果也不确定；
 */
const p2 =path.resolve('./hello.js');
console.log(p2)


/**
 *  3. 一般会将绝对路径作为第一个参数，相对路径作为第二个参数， 最终计算出一个确定的绝对路径；
 * 输出结果是可控的；因为工作目录是确定的，就可以保证这段代码任何方式执行返回结果都是一样的；
 */

const p3 = path.resolve('/user/data/', './hello.js');
console.log(p3);


/**
 * 4.  基于3的案例我们生成一个终极形态：这种使用方式也是我们在真正的开发中会使用的；
 *      __dirname 能够获得当前文件(模块)所在的目录的绝对路径，在commonjs中有介绍；
 */

const p4 =path.resolve(__dirname,"./hello.js");
console.log(p4);